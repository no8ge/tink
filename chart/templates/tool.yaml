# docker Secret for private hub
---
apiVersion: v1
kind: Secret
metadata:
    name: regcred
data:
    .dockerconfigjson: eyJhdXRocyI6eyJkb2NrZXJodWIucWluZ2Nsb3VkLmNvbSI6eyJhdXRoIjoiY1dsdVozUmxjM1JBZVhWdWFXWjVMbU52YlRwNmFIVTRPR3BwWlNFPSJ9LCJodHRwczovL2luZGV4LmRvY2tlci5pby92MS8iOnsiYXV0aCI6ImJYZ3lOVFF5T2pJMU5ESXhNREE0T1RFPSJ9fX0=
type: kubernetes.io/dockerconfigjson

# script: web server for ack
---
apiVersion: v1
kind: ConfigMap
metadata:
    name: ack
data:
    ack: |
        import os

        if __name__ == "__main__":
            os.system('nohup python -m http.server > /atop/ack.log 2>&1 &')


# script: push sometings to minio
---
apiVersion: v1
kind: ConfigMap
metadata:
    name: pusher
data:
    script: |
        import os

        from minio import Minio
        from pprint import pprint
        from minio.error import InvalidResponseError

        prefix = os.getenv('PREFIX')
        pod_name = os.getenv('POD_NAME')

        minioClient = Minio(
            'middleware-minio.tink:9000',
            access_key='admin',
            secret_key='changeme',
            secure=False
        )

        def get_all_abs_path(source_dir):
            path_list = []
            for fpathe, dirs, fs in os.walk(source_dir):
                for f in fs:
                    p = os.path.join(fpathe, f)
                    path_list.append(p)
            return path_list

        def pull(bucket_name: str, prefix: str):
            try:
                objects = minioClient.list_objects(
                    bucket_name,
                    prefix=prefix,
                    recursive=True
                )
                for obj in objects:
                    pprint(
                        [
                            obj.bucket_name,
                            obj.object_name.encode('utf-8'),
                            obj.last_modified,
                            obj.etag,
                            obj.size,
                            obj.content_type
                        ]
                    )
                    minioClient.fget_object(
                        'atop', obj.object_name, f'{obj.object_name}')
            except InvalidResponseError as err:
                pprint(err)


        def push(prefix):
            try:
                if os.path.isdir(prefix):
                    object_list = get_all_abs_path(prefix)
                else:
                    object_list = [prefix]
                for key in object_list:
                    minioClient.fput_object('atop', pod_name+key, key)
                    pprint(f'push: {key}')
                pprint('push done')
            except Exception as err:
                pprint(err)


        if __name__ == "__main__":
            push(prefix)
