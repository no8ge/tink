# ---
# apiVersion: v1
# kind: ConfigMap
# metadata:
#     name: "{{ .Chart.Name }}-{{ .Release.Name }}"
# data:
#     testbed.yaml: |
#         {{ .Values.configmap.testbed | indent 2 }}
#     testcases.yaml: |
#         {{ .Values.configmap.testcases | indent 2 }}

---
apiVersion: v1
kind: ConfigMap
metadata:
    name: "{{ .Chart.Name }}-{{ .Release.Name }}-filebeat"
data:
    filebeat.yml: |
        filebeat.inputs:
        - type: filestream
          paths:
            - /hatbox/Log/logs/runlog.log.*
            - /hatbox/Log/logs/*.log
            
        output.elasticsearch:
          enabled: true
          allow_older_versions: true
          hosts: '${ELASTICSEARCH_SERVICE_HOSTS:elasticsearch-master:9200}'

        # output.console:
        # pretty: true

---
apiVersion: v1
kind: ConfigMap
metadata:
    name: "{{ .Chart.Name }}-{{ .Release.Name }}-cli"
data:
    cli.py: |
        import os
        import time
        import shutil
        import datetime
        import requests
        import traceback
        from minio import Minio


        print('====== atop 开始处理测试报告 ======')
        report = os.getenv('REPORT')
        print(f'测试报告路径为: {report}')

        type = os.getenv('TYPE', 'aomaker')
        prefix = os.getenv('PREFIX')
        print(f'测试报告名称为: {prefix}')

        minio_host = os.getenv('MINIO_HOST')
        files_service = os.getenv('FILES_SERVICE', '127.0.0.1:8004')


        def get_all_abs_path(source_dir):
            path_list = []
            for fpathe, dirs, fs in os.walk(source_dir):
                for f in fs:
                    p = os.path.join(fpathe, f)
                    path_list.append(p)
            return path_list


        def push(bucket_name, prefix):

            try:
                minioClient = Minio(
                    minio_host,
                    access_key='admin',
                    secret_key='changeme',
                    secure=False
                )
                print('minio客户端连接成功')
            except Exception as err:
                print('minio客户端连接失败')
                print(err)

            try:
                if os.path.isdir(report):
                    object_list = get_all_abs_path(report)
                else:
                    object_list = [report]
                print('==开始备份测试报告至minio')
                for key in object_list:
                    minioClient.fput_object(bucket_name, prefix+key, key)
                print('==测试报告已备份至minio')
            except Exception as err:
                print('测试报告备份至minio失败')
                print(err)


        if __name__ == "__main__":
            if os.path.exists(report):
                try:
                    t = datetime.datetime.now().strftime('%Y%m%d%H%M%S')
                    source_folder = report
                    target_folder = f"/report/{prefix}/{t}{report}"
                    
                    print(f'开始复制测试报告到文件服务器共享存储目录:{target_folder} ...')
                    try:
                        shutil.rmtree(target_folder)
                        print(f'存在同名目录: {target_folder}')
                        print(f'删除同名目录: {target_folder}')
                    except FileNotFoundError:
                        pass

                    shutil.copytree(source_folder, target_folder)
                    print('复制完成')

                    push('result', f"{prefix}/{t}")
                except Exception as err:
                    print(err)
                    print(traceback.format_exc())

            else:
                print('测试报告不存在')
            print('======= atop 完成测试报告处理 =======')
